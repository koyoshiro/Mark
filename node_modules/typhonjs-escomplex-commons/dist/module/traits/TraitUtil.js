'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TraitUtil = function () {
   function TraitUtil() {
      _classCallCheck(this, TraitUtil);
   }

   _createClass(TraitUtil, null, [{
      key: 'safeArray',

      /**
       * Provides safe array creation from a given input.
       *
       * @param {*}  value - A value to potentially convert into a safe array.
       *
       * @returns {Array}
       */
      value: function safeArray(value) {
         return typeof value === 'undefined' || value === null ? [] : Array.isArray(value) ? value : [value];
      }

      /**
       * Provides a utility method that defers to `object.name` if it exists or fallback to `defaultName` or `anonymous`.
       *
       * @param {object}   object - The target object to provide safe name coverage.
       * @param {string}   defaultName - A default name to fallback to if `object.name` is missing.
       *
       * @returns {string}
       */

   }, {
      key: 'safeName',
      value: function safeName(object) {
         var defaultName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

         if (object !== null && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.name === 'string' && object.name !== '') {
            return object.name;
         }

         if (typeof defaultName === 'string' && defaultName !== '') {
            return defaultName;
         }

         return '<anonymous>';
      }

      /**
       * Provides a utility method that defers to `object.value` if it exists or fallback to `defaultValue` or `anonymous`.
       *
       * @param {object}   object - The target object to provide safe name coverage.
       * @param {string}   defaultValue - A default value to fallback to if `object.value` is missing.
       *
       * @returns {string}
       */

   }, {
      key: 'safeValue',
      value: function safeValue(object) {
         var defaultValue = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

         if (object !== null && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.value === 'string' && object.value !== '') {
            return object.value;
         }

         if (typeof defaultValue === 'string' && defaultValue !== '') {
            return defaultValue;
         }

         return '<anonymous>';
      }
   }]);

   return TraitUtil;
}();

exports.default = TraitUtil;
module.exports = exports['default'];