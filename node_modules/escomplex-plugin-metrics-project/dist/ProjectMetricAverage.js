'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ObjectUtil = require('typhonjs-escomplex-commons/dist/utils/ObjectUtil');

var _ObjectUtil2 = _interopRequireDefault(_ObjectUtil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProjectMetricCalculate = function () {
   function ProjectMetricCalculate() {
      _classCallCheck(this, ProjectMetricCalculate);
   }

   _createClass(ProjectMetricCalculate, null, [{
      key: 'calculate',

      /**
       * Calculates average ModuleReport metrics that are applicable to ProjectReport.
       *
       * @param {object}   projectReport - The project report being processed.
       *
       * @private
       */
      value: function calculate(projectReport) {
         var divisor = projectReport.modules.length === 0 ? 1 : projectReport.modules.length;

         var moduleAverage = projectReport.moduleAverage;
         var moduleAverageKeys = _ObjectUtil2.default.getAccessorList(moduleAverage);

         // Defer to ModuleReport to sum all relevant module metrics applicable to ProjectResult.
         projectReport.modules.forEach(function (module) {
            moduleAverageKeys.forEach(function (averageKey) {
               var targetValue = _ObjectUtil2.default.safeAccess(module, averageKey, 0);
               _ObjectUtil2.default.safeSet(moduleAverage, averageKey, targetValue, 'add');
            });
         });

         moduleAverageKeys.forEach(function (averageKey) {
            _ObjectUtil2.default.safeSet(moduleAverage, averageKey, divisor, 'div');
         });
      }
   }]);

   return ProjectMetricCalculate;
}();

exports.default = ProjectMetricCalculate;
module.exports = exports['default'];