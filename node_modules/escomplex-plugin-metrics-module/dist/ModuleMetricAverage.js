'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ObjectUtil = require('typhonjs-escomplex-commons/dist/utils/ObjectUtil');

var _ObjectUtil2 = _interopRequireDefault(_ObjectUtil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides a typhonjs-escomplex-module / ESComplexModule plugin which gathers and calculates all default metrics.
 *
 * @see https://www.npmjs.com/package/typhonjs-escomplex-commons
 * @see https://www.npmjs.com/package/typhonjs-escomplex-module
 */
var ModuleMetricAverage = function () {
   function ModuleMetricAverage() {
      _classCallCheck(this, ModuleMetricAverage);
   }

   _createClass(ModuleMetricAverage, null, [{
      key: 'calculate',

      /**
       * Coordinates calculating all metrics. All module and class methods are traversed. If there are no module or class
       * methods respectively the aggregate MethodReport is used for calculations.
       *
       * @param {ModuleReport}   moduleReport - The ModuleReport being processed.
       * @param {object}         settings - Settings for module processing.
       *
       * @private
       */
      value: function calculate(moduleReport) {
         var moduleMethodCount = moduleReport.methods.length;
         var moduleMethodAverages = moduleReport.methodAverage;
         var moduleMethodAverageKeys = _ObjectUtil2.default.getAccessorList(moduleMethodAverages);

         // Handle module methods.
         moduleReport.methods.forEach(function (methodReport) {
            moduleMethodAverageKeys.forEach(function (averageKey) {
               var targetValue = _ObjectUtil2.default.safeAccess(methodReport, averageKey, 0);
               _ObjectUtil2.default.safeSet(moduleMethodAverages, averageKey, targetValue, 'add');
            });
         });

         // Handle module class reports.
         moduleReport.classes.forEach(function (classReport) {
            var classMethodAverages = classReport.methodAverage;

            var classMethodCount = classReport.methods.length;
            moduleMethodCount += classMethodCount;

            // Process all class methods.
            classReport.methods.forEach(function (methodReport) {
               moduleMethodAverageKeys.forEach(function (averageKey) {
                  var targetValue = _ObjectUtil2.default.safeAccess(methodReport, averageKey, 0);

                  _ObjectUtil2.default.safeSet(moduleMethodAverages, averageKey, targetValue, 'add');
                  _ObjectUtil2.default.safeSet(classMethodAverages, averageKey, targetValue, 'add');
               });
            });

            // If there are no class methods use the class aggregate MethodReport.
            if (classMethodCount === 0) {
               // Sane handling of classes that contain no methods.
               moduleMethodAverageKeys.forEach(function (averageKey) {
                  var targetValue = _ObjectUtil2.default.safeAccess(classReport.aggregateMethodReport, averageKey, 0);

                  _ObjectUtil2.default.safeSet(classMethodAverages, averageKey, targetValue, 'add');
               });

               classMethodCount = 1;
            }

            moduleMethodAverageKeys.forEach(function (averageKey) {
               _ObjectUtil2.default.safeSet(classMethodAverages, averageKey, classMethodCount, 'div');
            });
         });

         // If there are no module methods use the module aggregate MethodReport.
         if (moduleMethodCount === 0) {
            // Sane handling of classes that contain no methods.
            moduleMethodAverageKeys.forEach(function (averageKey) {
               var targetValue = _ObjectUtil2.default.safeAccess(moduleReport.aggregateMethodReport, averageKey, 0);

               _ObjectUtil2.default.safeSet(moduleMethodAverages, averageKey, targetValue, 'add');
            });

            // Sane handling of modules that contain no methods.
            moduleMethodCount = 1;
         }

         moduleMethodAverageKeys.forEach(function (averageKey) {
            _ObjectUtil2.default.safeSet(moduleMethodAverages, averageKey, moduleMethodCount, 'div');
         });
      }
   }]);

   return ModuleMetricAverage;
}();

exports.default = ModuleMetricAverage;
module.exports = exports['default'];