'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ModuleMetricAverage = require('./ModuleMetricAverage');

var _ModuleMetricAverage2 = _interopRequireDefault(_ModuleMetricAverage);

var _ModuleMetricCalculate = require('./ModuleMetricCalculate');

var _ModuleMetricCalculate2 = _interopRequireDefault(_ModuleMetricCalculate);

var _ModuleMetricPostAverage = require('./ModuleMetricPostAverage');

var _ModuleMetricPostAverage2 = _interopRequireDefault(_ModuleMetricPostAverage);

var _ModuleMetricProcess = require('./ModuleMetricProcess');

var _ModuleMetricProcess2 = _interopRequireDefault(_ModuleMetricProcess);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides a typhonjs-escomplex-module / ESComplexModule plugin which gathers and calculates all default metrics.
 *
 * @see https://www.npmjs.com/package/typhonjs-escomplex-commons
 * @see https://www.npmjs.com/package/typhonjs-escomplex-module
 */
var PluginMetricsModule = function () {
   function PluginMetricsModule() {
      _classCallCheck(this, PluginMetricsModule);
   }

   _createClass(PluginMetricsModule, [{
      key: 'onConfigure',

      /**
       * Loads any default settings that are not already provided by any user options.
       *
       * @param {object}   ev - escomplex plugin event data.
       *
       * The following options are:
       * ```
       * (boolean)   newmi - Boolean indicating whether the maintainability index should be rebased on a scale from
       *                     0 to 100; defaults to false.
       * ```
       */
      value: function onConfigure(ev) {
         ev.data.settings.newmi = typeof ev.data.options.newmi === 'boolean' ? ev.data.options.newmi : false;
      }

      /**
       * During AST traversal when a node is entered it is processed immediately if the node type corresponds to a
       * loaded trait syntax. This is the main metric capture and processing location.
       *
       * @param {object}   ev - escomplex plugin event data.
       */

   }, {
      key: 'onEnterNode',
      value: function onEnterNode(ev) {
         var moduleReport = ev.data.moduleReport;
         var scopeControl = ev.data.scopeControl;
         var node = ev.data.node;
         var parent = ev.data.parent;
         var syntax = ev.data.syntaxes[node.type];

         // Process node syntax.
         if ((typeof syntax === 'undefined' ? 'undefined' : _typeof(syntax)) === 'object') {
            _ModuleMetricProcess2.default.processSyntax(moduleReport, scopeControl, syntax, node, parent);
         }
      }

      /**
       * Performs average calculations based on collected report data.
       *
       * @param {object}   ev - escomplex plugin event data.
       */

   }, {
      key: 'onModuleAverage',
      value: function onModuleAverage(ev) {
         _ModuleMetricAverage2.default.calculate(ev.data.moduleReport);
      }

      /**
       * Performs initial calculations based on collected report data.
       *
       * @param {object}   ev - escomplex plugin event data.
       */

   }, {
      key: 'onModuleCalculate',
      value: function onModuleCalculate(ev) {
         _ModuleMetricCalculate2.default.calculate(ev.data.moduleReport);
      }

      /**
       * Performs any calculations that depend on averaged data. This is where the maintainability index is calculated.
       *
       * @param {object}   ev - escomplex plugin event data.
       */

   }, {
      key: 'onModulePostAverage',
      value: function onModulePostAverage(ev) {
         _ModuleMetricPostAverage2.default.calculate(ev.data.moduleReport, ev.data.settings);
      }

      /**
       * A new module report scope has been created. Update any associated metrics processing regarding the new scope.
       *
       * @param {object}   ev - escomplex plugin event data.
       */

   }, {
      key: 'onModuleScopeCreated',
      value: function onModuleScopeCreated(ev) {
         _ModuleMetricProcess2.default.createScope(ev.data.moduleReport, ev.data.scopeControl, ev.data.newScope);
      }
   }]);

   return PluginMetricsModule;
}();

exports.default = PluginMetricsModule;
module.exports = exports['default'];